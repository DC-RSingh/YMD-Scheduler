generator client {
  provider = "prisma-client-js"
  output = "./client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./ymd-db.db"
}

model classtype {
  Id         Int          @id @default(autoincrement())
  Type       String       
  musicclass musicclass[]
}

model credentials {
  Id               Int                @id @default(autoincrement())
  Credential       String             @unique(map: "Credential") 
  staffcredentials staffcredentials[]
}

model days {
  Id                 Int                  @id @default(autoincrement()) 
  Day                String               
  staffavailabledays staffavailabledays[]
}

model musicclass {
  Id               Int                @id @default(autoincrement())
  ClassType        Int
  StaffId          Int
  TimeSlotId       Int
  RoomId           Int
  ClassSize        Int                
  classtype        classtype          @relation(fields: [ClassType], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  room             room               @relation(fields: [RoomId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  staff            staff              @relation(fields: [StaffId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  timeslot         timeslot           @relation(fields: [TimeSlotId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  studentclasslist studentclasslist[]

  @@index([ClassType], map: "mcClassType")
  @@index([RoomId], map: "RoomId")
  @@index([StaffId], map: "mcStaffId")
  @@index([TimeSlotId], map: "mcTimeSlotId")
}

model restrictions {
  Id                Int                 @id @default(autoincrement())
  Restriction       String              
  staffrestrictions staffrestrictions[]
}

model room {
  Id         Int          @id @default(autoincrement())
  Type       Int
  Name       String       
  RoomSize   Int          
  hasPiano   Boolean
  roomtype   roomtype     @relation(fields: [Type], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  musicclass musicclass[]

  @@index([Type], map: "rType")
}

model roomtype {
  Id   Int    @id @default(autoincrement())
  Type String 
  room room[]
}

model skills {
  Id          Int           @id @default(autoincrement())
  Skill       String        @unique(map: "Skill") 
  staffskills staffskills[]
}

model staff {
  Id                 Int                  @id @default(autoincrement())
  Type               Int
  FirstName          String               
  LastName           String               
  Gender             String               
  DateOfBirth        DateTime             
  Email              String               
  Telephone          String               
  MaxHoursPerWeek    Int                  
  stafftype          stafftype            @relation(fields: [Type], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  musicclass         musicclass[]
  staffavailabledays staffavailabledays[]
  staffcredentials   staffcredentials[]
  staffrestrictions  staffrestrictions[]
  staffskills        staffskills[]

  @@index([Type], map: "sType")
}

model staffavailabledays {
  Id      Int   @id @default(autoincrement())
  StaffId Int
  DayId   Int   
  days    days  @relation(fields: [DayId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  staff   staff @relation(fields: [StaffId], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@index([DayId], map: "DayId")
  @@index([StaffId], map: "sadStaffId")
}

model staffcredentials {
  Id           Int         @id @default(autoincrement())
  StaffId      Int
  CredentialId Int
  credentials  credentials @relation(fields: [CredentialId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  staff        staff       @relation(fields: [StaffId], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@index([CredentialId], map: "CredentialId")
  @@index([StaffId], map: "scStaffId")
}

model staffrestrictions {
  Id            Int          @id @default(autoincrement())
  StaffId       Int
  RestrictionId Int
  restrictions  restrictions @relation(fields: [RestrictionId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  staff         staff        @relation(fields: [StaffId], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@index([RestrictionId], map: "RestrictionId")
  @@index([StaffId], map: "srStaffId")
}

model staffskills {
  Id      Int    @id @default(autoincrement())
  StaffId Int
  SkillId Int
  skills  skills @relation(fields: [SkillId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  staff   staff  @relation(fields: [StaffId], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@index([SkillId], map: "SkillId")
  @@index([StaffId], map: "StaffId")
}

model stafftype {
  Id    Int     @id @default(autoincrement())
  Type  String  @unique(map: "Type") 
  staff staff[]
}

model studentclasslist {
  Id         Int        @id @default(autoincrement())
  ClassId    Int
  StudentId  Int
  musicclass musicclass @relation(fields: [ClassId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  students   students   @relation(fields: [StudentId], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@index([ClassId], map: "ClassId")
  @@index([StudentId], map: "StudentId")
}

model students {
  Id               Int                @id @default(autoincrement())
  FirstName        String            
  LastName         String            
  Gender           String            
  DateOfBirth      DateTime          
  ContactEmail     String            
  ContactTelephone String            
  PaymentMethod    String            
  studentclasslist studentclasslist[]
}

model timeslot {
  Id           Int            @id @default(autoincrement())
  StartDate    DateTime       
  EndDate      DateTime       
  Duration     Int?
  WeekDay      Int?
  Attended     Boolean?       @default(false)
  musicclass   musicclass[]
  timeslotmeta timeslotmeta[]
}

model timeslotmeta {
  Id            Int       @id @default(autoincrement())
  TimeSlotId    Int
  RepeatStart   DateTime  
  RepeatEnd     DateTime? 
  RepeatYear    Int?      
  RepeatMonth   Int?      
  RepeatDay     Int?      
  RepeatWeek    Int?      
  RepeatWeekday Int?      
  timeslot      timeslot  @relation(fields: [TimeSlotId], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@index([TimeSlotId], map: "TimeSlotId")
}
